#建议调试程序时，先把不需要的代码注释掉，然后逐步解除注释，逐步调试。
#coding=utf-8
# Description: Python基础学习

#DESCRIPTION：数据容器
"""
数据容器：一种可以容纳多个数据的数据类型
        分为：列表、元组、字符串、集合、字典
"""




#description:列表（list）
'''
列表的定义与声明：
    1.定义变量：变量名称=[元素1,元素2,元素3]
            例如：my_list=['tom'.2242,True]
      定义空列表：变量名称=[]  或者  变量名称=list()
    2.嵌套：
        列表中的元素为列表
        定义：my_list=[[1,2,3],['tom','jane']]

列表的下标索引：
    1.语法：第一个元素为0，索引范围为[0,n-1]
        列表名[下标索引]
        例：list[0]
    2.反向索引：第一个元素为-n，索引范围为[-n,-1]
        例：list[-1]  代表list中的最后一个元素
    3.嵌套列表的索引：
        列表名[索引][索引]
    4.超出索引范围会报错
    
列表的常用方法:
    1.查询功能：
        语法：列表名.index(元素)
        返回值：返回下标索引值，整型；元素不存在则报错
    2.修改功能：
        语法：列表名[索引值]='修改值'
    3.插入功能：
        语法：列表名.insert(下标,元素)
    4.追加功能：将元素插入到尾部
        语法：列表名.append(元素)    
    5.追加多个：
        语法：列表名.extend(数据容器名)
    6.元素删除：
        1）del 列表名[下标]
        2）列表名.pop(下标)
            pop方法可以返回删除的值  例如：element=list.pop(2)
    7.删除某个元素在列表中的第一项：
        语法：列表名.remove(元素)
    8.清空列表：
        语法：列表名.clear
    9.统计某元素在列表中的数量：
        语法：列表.count(元素)
    10.列表中元素数量：
        语法：len(列表名)
        

列表的遍历：while循环：可以控制选取范围
          for循环：只能一个个取到底
            语法：for 临时变量 in 数据容器：        

'''

"例题："
my_list=[21,25,21,23,22,20]
my_list.append(31)
list2=[29,33,30]
my_list.extend(list2)
a=my_list[0]
length=len(my_list)
b=my_list[length-1]
c=my_list.index(31)
print(a,b,c)



#description:元组（tuple）->不可被修改
"""
元组的定义：
    定义字面量：(数据1,数据2,数据3,....)
    定义元组变量：变量名=(数据1,数据2,数据3,....)
    定义空元组：变量名=()
              变量名=tuple()           这是得到了一个元组的类对象
    注意的是，如果元组中只有一个数据，需要在数据后面加, ，否则不是元组
    元组提取元素：示例->t1[1][2]   代表获取t1中第二个元组的第三个数据
"""

"""
a=(1,"hello",True)
b=tuple()
print(f"元组1，元组2的内容为{a}     {b}")
"""


"""
元组的方法：
    t1.index(数据)                 查找该数据在t1第一次出现的位置，有就返回位置，没有报错
    t1.count(数据)                 统计数据在t1中出现的次数
    len(t1)                       计算t1的长度
"""

"""
num1=a.index(True)
num2=a.count(1)
num3=len(a)
"""


"""
元组的遍历：
 for i in t1:
"""




#description:字符串（string）
"""
字符串的定义：
str="内容"
取字符串中元素：value=str[1]      代表取第二个元素

字符串的方法：
index方法：str.index("元素")         返回元素在str出现的前一个下标值，也就是说，查找a，a的下标值为8，返回7
replace方法->字符串的替换:str.replace(str1,str2)        把字符串str中的str1全部替换为str2
    并不是修改字符串，是得到一个新字符串
split方法->字符串的分割：str.split(str1)         按照str1分割字符串，将字符串分为多个字符串，并存入列表中
    字符串本身不会改变，但会得到一个列表对象
strip方法->字符串的规整：str.strip(str1)     去除字符串首尾的str1字符串，如果括号内为空，则是去除空格
    当str1中有多个字符，str1会被划分为多个字符，会挨个去除
count方法—>字符串的统计：str.coung(str1)     统计str1在str中出现的次数
len方法：len(str)      返回str的长度
"""


''''
字符串的特点：
只存储字符串；长度任意；支持下标索引；允许有重复字符；不可以修改（不能删除或者增加元素）；支持各种循环
'''

"""
str0="hello my name is Lihua"
a=str0.count("l")
str1=str0.replace(" ","|")
str_list=str1.split("|")
print(f"l的出现次数为{a}次，修改后的字符串为{str1}，得到的列表为{str_list}")

"""



#description:序列
"""
序列是指内容连续，有序，可使用下标索引的一类数据容器->列表
列表、元组、字符串均可以视为序列

序列的切片：从序列中得到一个子序列
        语法：序列[起始下标：结束下标：步长]     其中，起始下标表示从何处开始，留空视为从头；结束下标（不含）表示何处结束，留空视为结尾；步长表示取元素的间隔（步长为n，代表隔n-1个元素取），留空代表步长为1 
        当步长为负数时，步长为-n，代表隔n-1个元素取
        切片的操作不会影响序列本身，而是得到一个新序列       
"""
list1=[0,1,2,3,4,5,6]
tuple1=(0,1,2,3,4,5,6)
str1="0,1,2,3,4,5,6"
result1=list1[1:2:2]
result2=tuple1[::-1]
result3=str1[:]
print(f"列表通过[1:2:2]语法得到的切片为{result1}")
print(f"元组通过[：：-1]语法得到的切片为{result2}")
print(f"字符串通过[：]语法得到的切片为{result3}")



#description:集合(set)
"""
集合：集合内元素不重复且无序
集合的定义：
set1={元素1,元素2,元素3....}

集合的功能：集合是无序的，所以不支持下标索引
添加元素：set1.add(元素)
移除元素：set1.remove(元素)    将指定元素从集合内删除
随机取出元素：set1.pop()       关于得到一个元素，但集合本身也会被修改，去除了钙元素
清空集合：set1.clear()        清空集合
取出两个集合的差集：set1.difference(set2)     取出集合1有而集合2没有的，返回一个新集合，但原有集合不变
清除差集：set1.difference_update(set2)      在集合1内去除与集合2中共有的元素，结果是集合1会发生改变
集合的合并：set1.union(set2)                将集合1和集合2组合成一个新集合，返回新集合，原有集合不变
统计集合元素的数量：len(set)              返回集合的长度值
集合的遍历：只能使用for循环，不支持while循环（不支持下标索引）     for element in set1:




"""


#description:字典/映射(dict)
"""
字典：通过key来找到value，不支持下标索引
字典的定义：使用{}，存储键值对
dict0={key1:value1,key2:value2，....}
定义空字典：dict0={}  或   dict0=dict()
字典内的key是不能重复的，后者重复的key会覆盖前者 


字典查询：dict-=[key0]        返回key0对应的value

字典的key和value是任意数据类型，key不能为字典

字典是可以嵌套的，这可以实现记录多个信息（如一个人的不同成绩）
    例如：
    stu_score_dict={
        "小明"：{
            "语文"：90
            "数学"：90
        },"小刚":{
            "english":90
            "history":90
        }
    }
    score=stu_score_dict["小明"]["语文"]
    
    
"""


"""
字典的常用操作：
增加元素：dict[key]=value    字典会被修改，增加了元素
更新元素：dict[key]=value    与增加元素不同的是，更新元素的key是已有的，增加的是原来没有的
删除元素：dict.pop(key)      返回key对应的value，同时原有字典被修改，key和value都会被删除
清空字典：dict.clear()       字典被清空
获取全部key:dict.keys()      返回类型是字典视图
    keys()方法能够实现字典的遍历->for key in keys:/for key in dict:
获取字典长度：len(dict)
"""


#数据容器对比总结
"""
分类：
是否支持下标索引：
    支持：列表，元组，字符串——序列类型
    不支持：集合，元组——非序列类型
是否支持重复元素：
    支持：列表，元组，字符串
    不支持：集合，字典
是否可被修改：
    支持：列表，集合，字典
    不支持：元组，字符串
"""


#数据容器的通用操作：
"""
获取长度：len()
获取最大元素：max(容器)
获取最小元素：min(容器)
容器间的转换：括号内为容器名
           list()——>转换为列表
           tuple()-->转换为元组
           str()-->转换为字符串
           set()-->转换为集合
通用的排序功能：sorted(容器，[reverse=True])       reverse的默认值为False,如果要反序排序，则值为True
    排完序之后返回列表 
"""

#字符串的比较大小
"""
用ASCII码进行对比，前一位大，整个字符串就大
"""







