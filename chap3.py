#建议调试程序时，先把不需要的代码注释掉，然后逐步解除注释，逐步调试。
# Description: eval函数与运算符

# Description: eval函数的使用
"""
eval函数的作用是执行一个字符串表达式,并返回表达式的值。
也就是说,在使用eval函数时,要加引号,否则会报错。
通常与input一起使用,input接收的是字符串,eval可以将字符串转换为表达式。
也就是说,eval函数可以将字符串当成有效的表达式来求值,并返回计算结果。
也可以将输入的内容转为列表、元组、字典等数据类型。(比如输入数字,但是在程序里是字符串,使用eval可以将其转为整形或者浮点型)
"""


a=eval(input("请输入您的年龄:"))           #输入的是数字,但是在程序里是字符串,使用eval可以将其转为整形或者浮点型
hello="北京欢迎你"
print(eval('hello'))            #输出北京欢迎你




# Description: 算数运算符
"""
加减乘除不变,//是整除,%是取余数,**是幂运算；除法得到的是浮点数,整除得到的是整数
以上运算符的优先级是:** > * / // % > + -
此外,以上运算符均有缩写形式,如a+=b等价于a=a+b
链式复制:a=b=c=1,等价于c=1,b=1,a=1
系列解包赋值:a,b=1,2,等价于a=1,b=2;
            a,b=b,a,交换a和b的值;
            其中,解包还与列表类型有关,如a,*b=1,2,3,4,5,等价于a=1,b=[2,3,4,5]
"""



# Description: 比较运算符
"""
比较运算符有:==,!=,>,<,>=,<=
比较运算符的优先级是:(> < >= <=)>(== !=)
比较运算符的结果是布尔值,True或False
"""

print("98大于等于98吗",98>=98)      #True
print("98不等于98吗",98!=98)        #False



# Description: 逻辑运算符
"""
逻辑运算符有(与或非):and,or,not
逻辑运算符的优先级是:not > and > or
逻辑运算符的结果是布尔值,True或False
逻辑运算顺序除not外是从左到右,not是单目运算符,需要先算表达式再进行取反;and和or是双目运算符
"""


#Description: 位运算符
"""
位运算符有:~,&,|,^,<<,>>
位运算符的优先级是:~ > << >> > & > ^ > |
位运算符的结果是整数
位运算符的操作对象是整数,对整数的二进制位进行操作，也就是说，在进行运算时,要先把数据转成二进制才能进行位运算（不过，数据在计算机存储中均为二进制，所以变量的显式的进制并不影响位运算）
~是取反运算符,对整数的二进制位取反,包括符号位:把两个二进制数据的每一位进行取反操作,0变1,1变0
&是与运算符,对整数的二进制位进行与操作:两个二进制数据的每一位进行与操作,只有两个数据的对应位都为1时,结果才为1
|是或运算符,对整数的二进制位进行或操作:两个二进制数据的每一位进行或操作,只要两个数据的对应位有一个为1,结果就为1
^是异或运算符,对整数的二进制位进行异或操作:两个二进制数据的每一位进行异或操作,两个数据的对应位不同,结果为1,相同则为0
<<是左移运算符,对整数的二进制位进行左移操作:把整数的二进制位向左移动指定位数,高位丢弃,低位补0;其中，<<左边的数据是原始数据,右边的数据是移动的位数
>>是右移运算符,对整数的二进制位进行右移操作:把整数的二进制位向右移动指定位数,低位丢弃,高位补0
"""
print("与运算:",12&8)
print("或运算:",12|8)
print("异或运算:",12^8)
print("按位取反:",~12)


#Description: 运算符的优先级
"""
幂运算>取反、正负号>算术运算符>逻辑运算符>位运算符(>>、<< > & > ^ > |)>比较运算符
"""